scale_fill_viridis(name="Opioid Overdose Rate", option = "magma", trans = "reverse",
breaks = pretty_breaks(n = 5)) +
geom_point(data = filter(unhoused_locations_yrs, Year == 2023), aes(x = Longitude, y = Latitude,
size = Responses,),
color = "#8c62aa",alpha = 0.7) +
guides(size = FALSE) +
theme_map() +
theme(
plot.title = element_text(hjust = 0, size= 13),
plot.subtitle = element_text(size = 10, hjust = 0), #subtitle not showing
legend.title = element_text(size = 12),
legend.title.align = 0.5)
}
if (input$year == "2021") { #2021 Rate
p <-  ggplot() +
geom_sf(data = zip_chi_shape) +
geom_sf(data = filter(opioid_shape_long, Year == "2021"), aes(fill = Overdose_Rate), color = NA) +
labs(title = "Opioid Overdose Rate (Nonfatal and Fatal Per 10,000 Ppl)",
subtitle = paste("By Zip in 2021. Dot Size Correlated W/ High-Density Unhoused Pop.")) +
scale_fill_viridis(name="Opioid Overdose Rate", option = "magma", trans = "reverse",
breaks = pretty_breaks(n = 5)) +
geom_point(data = filter(unhoused_locations_yrs, Year == 2022), aes(x = Longitude, y = Latitude,
size = Responses,),
color = "#8c62aa",alpha = 0.7) +
guides(size = FALSE) +
theme_map() +
theme(
plot.title = element_text(hjust = 0, size= 13),
plot.subtitle = element_text(size = 10, hjust = 0), #subtitle not showing
legend.title = element_text(size = 12),
legend.title.align = 0.5)
}
if (input$year == "2020") { #2020 Rate
p <-  ggplot() +
geom_sf(data = zip_chi_shape) +
geom_sf(data = filter(opioid_shape_long, Year == "2020"), aes(fill = Overdose_Rate), color = NA) +
labs(title = "Opioid Overdose Rate (Nonfatal and Fatal Per 10,000 Ppl)",
subtitle = paste("By Zip in 2020. Dot Size Correlated W/ High-Density Unhoused Pop.")) +
scale_fill_viridis(name="Opioid Overdose Rate", option = "magma", trans = "reverse",
breaks = pretty_breaks(n = 5)) +
geom_point(data = filter(unhoused_locations_yrs, Year == 2022), aes(x = Longitude, y = Latitude,
size = Responses,),
color = "#8c62aa",alpha = 0.7) +
guides(size = FALSE) +
theme_map() +
theme(
plot.title = element_text(hjust = 0, size= 13),
plot.subtitle = element_text(size = 10, hjust = 0), #subtitle not showing
legend.title = element_text(size = 12),
legend.title.align = 0.5)
}
p
})
###Resource Equity
# Reactive function to select the plot based on user input
selected_plot <- reactive({
switch(input$plot_selector,
"Equity Zones" = equity_zones_plot,
"Equity Zones + Grocery Stores + Unhoused Population" = grocery_plot_unhoused_pop,
"Equity Zones + Mental Health Clinics + Unhoused Population" = mh_clinic_plot_unhoused_pop)
})
# Render the selected plot with an adjustable size
output$selected_plot <- renderPlot({
selected_plot() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 16)) +
theme(axis.text = element_blank(), axis.title = element_blank())
})
##Sentiment analysis
# For Sentiment Analysis Plot
output$sentimentPlot <- renderPlotly({
req(input$statType)  # Ensure that statType is not NULL or missing
overall_texas_feelings <- texas_feelings %>%
mutate(article_id = as.numeric(article_id)) %>%
group_by(article_id) %>%
summarise(mean_afinn = mean(afinn, na.rm=TRUE),
median_affin = median(afinn, na.rm=TRUE),
sd_afinn = sd(afinn, na.rm = TRUE),
min_afinn = min(afinn, na.rm = TRUE),
max_afinn = max(afinn, na.rm = TRUE))
# Dynamically select the statistic based on user input
sentiment_stat <- overall_texas_feelings %>%
select(article_id, input$statType) %>%
arrange(desc(article_id))
# Convert ggplot to plotly for interactivity
p3 <- ggplot(sentiment_stat, aes(x = article_id, y = input$statType)) +
geom_line(color = "#00BFC4", size = 1) +
geom_point(color = "#F8766D", size = 2, alpha = 0.8) +
theme_minimal() +
labs(
title = "Overall Sentiment  by  Article across time",
subtitle = "Sentiment scores with linear regression line",
x = "Article ID",
y = "Mean Sentiment Score"
) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),
)
ggplotly(p3)
})
# For Count Over Time Plot
output$countPlot <- renderPlotly({
# Validate input
validate(
need(input$citySelect, "Please select at least one city.")
)
filtered_data <- texas_graph %>%
filter(City %in% input$citySelect)
p2 <- ggplot(filtered_data, aes(x = month_year, y = log(Count), color = City)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")+
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Time", y = "Count", title = "Count Over Time by City")
ggplotly(p2)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("flatly"),
useShinyFeedback(),
titlePanel("Chicago Unhoused Populations and Migrant Crisis"),
tabsetPanel( #opioids
tabPanel(
h4("Opioid Overdose Rate and Unhoused Populations"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "year",
label = "Choose a Year of Interest.",
choices = c("2020", "2021", "2022"),
selected = NULL),
h5("Data: IL Dept of Public Health, ACS, Chicago Point-in-Time Survey")
),
mainPanel(
tabsetPanel(
tabPanel(title = "Opioid Rates", plotOutput("plot"))
))
)),
tabPanel( #equity mental health grocery
h4("Determinants of Homelessness and Unhoused Population"),
sidebarLayout(
sidebarPanel(
selectInput("plot_selector", "Select variables to plot",
choices = c("Equity Zones", "Equity Zones + Grocery Stores + Unhoused Population",
"Equity Zones + Mental Health Clinics + Unhoused Population"),
selected = "Equity Zones"),
),
mainPanel(
tabsetPanel(
tabPanel(title = "Equity Maps", plotOutput("selected_plot"))
))
)),
tabPanel( #text analysis
h4("Texas Sentiment and Count Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("statType", "Choose Statistic:",
choices = c("Mean" = "mean_afinn",
"Median" = "median_affin",
"Max" = "max_afinn",
"Min" = "min_afinn",
"SD"= "sd_afinn"))
),
mainPanel(
tabsetPanel(
tabPanel(title = "Texas Migrant Announcements",  plotlyOutput("sentimentPlot")))
))),
tabPanel( #text analysis
h4("New Arrival Count Over Time"),
sidebarLayout(
sidebarPanel(
selectInput("citySelect", "Choose a city:",
choices = unique(texas_graph$City),
selected = "Chicago", multiple = TRUE)
),
mainPanel(
tabsetPanel(
tabPanel(title = "Sentiment Analysis",  plotlyOutput("countPlot")))
))
))
)
server <- function(input, output) {
##OPIOIDS##
output$plot <-
renderPlot({
if (input$year == "2022") { #2022 Rate
# Make the plot
p <-   ggplot() +
geom_sf(data = zip_chi_shape) +
geom_sf(data = filter(opioid_shape_long, Year == "2022"), aes(fill = Overdose_Rate), color = NA) +
labs(title = "Opioid Overdose Rate (Nonfatal and Fatal Per 10,000 Ppl)",
subtitle = paste("By Zip in 2022. Dot Size Correlated W/ High-Density Unhoused Pop.")) +
scale_fill_viridis(name="Opioid Overdose Rate", option = "magma", trans = "reverse",
breaks = pretty_breaks(n = 5)) +
geom_point(data = filter(unhoused_locations_yrs, Year == 2023), aes(x = Longitude, y = Latitude,
size = Responses,),
color = "#8c62aa",alpha = 0.7) +
guides(size = FALSE) +
theme_map() +
theme(
plot.title = element_text(hjust = 0, size= 13),
plot.subtitle = element_text(size = 10, hjust = 0), #subtitle not showing
legend.title = element_text(size = 12),
legend.title.align = 0.5)
}
if (input$year == "2021") { #2021 Rate
p <-  ggplot() +
geom_sf(data = zip_chi_shape) +
geom_sf(data = filter(opioid_shape_long, Year == "2021"), aes(fill = Overdose_Rate), color = NA) +
labs(title = "Opioid Overdose Rate (Nonfatal and Fatal Per 10,000 Ppl)",
subtitle = paste("By Zip in 2021. Dot Size Correlated W/ High-Density Unhoused Pop.")) +
scale_fill_viridis(name="Opioid Overdose Rate", option = "magma", trans = "reverse",
breaks = pretty_breaks(n = 5)) +
geom_point(data = filter(unhoused_locations_yrs, Year == 2022), aes(x = Longitude, y = Latitude,
size = Responses,),
color = "#8c62aa",alpha = 0.7) +
guides(size = FALSE) +
theme_map() +
theme(
plot.title = element_text(hjust = 0, size= 13),
plot.subtitle = element_text(size = 10, hjust = 0), #subtitle not showing
legend.title = element_text(size = 12),
legend.title.align = 0.5)
}
if (input$year == "2020") { #2020 Rate
p <-  ggplot() +
geom_sf(data = zip_chi_shape) +
geom_sf(data = filter(opioid_shape_long, Year == "2020"), aes(fill = Overdose_Rate), color = NA) +
labs(title = "Opioid Overdose Rate (Nonfatal and Fatal Per 10,000 Ppl)",
subtitle = paste("By Zip in 2020. Dot Size Correlated W/ High-Density Unhoused Pop.")) +
scale_fill_viridis(name="Opioid Overdose Rate", option = "magma", trans = "reverse",
breaks = pretty_breaks(n = 5)) +
geom_point(data = filter(unhoused_locations_yrs, Year == 2022), aes(x = Longitude, y = Latitude,
size = Responses,),
color = "#8c62aa",alpha = 0.7) +
guides(size = FALSE) +
theme_map() +
theme(
plot.title = element_text(hjust = 0, size= 13),
plot.subtitle = element_text(size = 10, hjust = 0), #subtitle not showing
legend.title = element_text(size = 12),
legend.title.align = 0.5)
}
p
})
###Resource Equity
# Reactive function to select the plot based on user input
selected_plot <- reactive({
switch(input$plot_selector,
"Equity Zones" = equity_zones_plot,
"Equity Zones + Grocery Stores + Unhoused Population" = grocery_plot_unhoused_pop,
"Equity Zones + Mental Health Clinics + Unhoused Population" = mh_clinic_plot_unhoused_pop)
})
# Render the selected plot with an adjustable size
output$selected_plot <- renderPlot({
selected_plot() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 16)) +
theme(axis.text = element_blank(), axis.title = element_blank())
})
##Sentiment analysis
# For Sentiment Analysis Plot
output$sentimentPlot <- renderPlotly({
req(input$statType)  # Ensure that statType is not NULL or missing
overall_texas_feelings <- texas_feelings %>%
mutate(article_id = as.numeric(article_id)) %>%
group_by(article_id) %>%
summarise(mean_afinn = mean(afinn, na.rm=TRUE),
median_affin = median(afinn, na.rm=TRUE),
sd_afinn = sd(afinn, na.rm = TRUE),
min_afinn = min(afinn, na.rm = TRUE),
max_afinn = max(afinn, na.rm = TRUE))
# Dynamically select the statistic based on user input
sentiment_stat <- overall_texas_feelings %>%
select(article_id, !!sym(input$statType)) %>%
arrange(desc(article_id))
# Convert ggplot to plotly for interactivity
p3 <- ggplot(sentiment_stat, aes(x = article_id, y = !!sym(input$statType))) +
geom_line(color = "#00BFC4", size = 1) +
geom_point(color = "#F8766D", size = 2, alpha = 0.8) +
theme_minimal() +
labs(
title = "Overall Sentiment  by  Article across time",
subtitle = "Sentiment scores with linear regression line",
x = "Article ID",
y = "Mean Sentiment Score"
) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),
)
ggplotly(p3)
})
# For Count Over Time Plot
output$countPlot <- renderPlotly({
# Validate input
validate(
need(input$citySelect, "Please select at least one city.")
)
filtered_data <- texas_graph %>%
filter(City %in% input$citySelect)
p2 <- ggplot(filtered_data, aes(x = month_year, y = log(Count), color = City)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")+
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Time", y = "Count", title = "Count Over Time by City")
ggplotly(p2)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(theme = shinytheme("flatly"),
useShinyFeedback(),
titlePanel("Chicago Unhoused Populations and Migrant Crisis"),
tabsetPanel( #opioids
tabPanel(
h4("Opioid Overdose Rate and Unhoused Populations"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "year",
label = "Choose a Year of Interest.",
choices = c("2020", "2021", "2022"),
selected = NULL),
h5("Data: IL Dept of Public Health, ACS, Chicago Point-in-Time Survey")
),
mainPanel(
tabsetPanel(
tabPanel(title = "Opioid Rates", plotOutput("plot"))
))
)),
tabPanel( #equity mental health grocery
h4("Determinants of Homelessness and Unhoused Population"),
sidebarLayout(
sidebarPanel(
selectInput("plot_selector", "Select variables to plot",
choices = c("Equity Zones", "Equity Zones + Grocery Stores + Unhoused Population",
"Equity Zones + Mental Health Clinics + Unhoused Population"),
selected = "Equity Zones"),
),
mainPanel(
tabsetPanel(
tabPanel(title = "Equity Maps", plotOutput("selected_plot"))
))
)),
tabPanel( #text analysis
h4("Texas Sentiment and Count Analysis"),
sidebarLayout(
sidebarPanel(
selectInput("statType", "Choose Statistic:",
choices = c("Mean" = "mean_afinn",
"Median" = "median_affin",
"Max" = "max_afinn",
"Min" = "min_afinn",
"SD"= "sd_afinn"))
),
mainPanel(
tabsetPanel(
tabPanel(title = "Texas Migrant Announcements",  plotlyOutput("sentimentPlot")))
))),
tabPanel( #text analysis
h4("New Arrival Count Over Time"),
sidebarLayout(
sidebarPanel(
selectInput("citySelect", "Choose a city:",
choices = unique(texas_graph$City),
selected = "Chicago", multiple = TRUE)
),
mainPanel(
tabsetPanel(
tabPanel(title = "Sentiment Analysis",  plotlyOutput("countPlot")))
))
))
)
server <- function(input, output) {
##OPIOIDS##
output$plot <-
renderPlot({
if (input$year == "2022") { #2022 Rate
# Make the plot
p <-   ggplot() +
geom_sf(data = zip_chi_shape) +
geom_sf(data = filter(opioid_shape_long, Year == "2022"), aes(fill = Overdose_Rate), color = NA) +
labs(title = "Opioid Overdose Rate (Nonfatal and Fatal Per 10,000 Ppl)",
subtitle = paste("By Zip in 2022. Dot Size Correlated W/ High-Density Unhoused Pop.")) +
scale_fill_viridis(name="Opioid Overdose Rate", option = "magma", trans = "reverse",
breaks = pretty_breaks(n = 5)) +
geom_point(data = filter(unhoused_locations_yrs, Year == 2023), aes(x = Longitude, y = Latitude,
size = Responses,),
color = "#8c62aa",alpha = 0.7) +
guides(size = FALSE) +
theme_map() +
theme(
plot.title = element_text(hjust = 0, size= 13),
plot.subtitle = element_text(size = 10, hjust = 0), #subtitle not showing
legend.title = element_text(size = 12),
legend.title.align = 0.5)
}
if (input$year == "2021") { #2021 Rate
p <-  ggplot() +
geom_sf(data = zip_chi_shape) +
geom_sf(data = filter(opioid_shape_long, Year == "2021"), aes(fill = Overdose_Rate), color = NA) +
labs(title = "Opioid Overdose Rate (Nonfatal and Fatal Per 10,000 Ppl)",
subtitle = paste("By Zip in 2021. Dot Size Correlated W/ High-Density Unhoused Pop.")) +
scale_fill_viridis(name="Opioid Overdose Rate", option = "magma", trans = "reverse",
breaks = pretty_breaks(n = 5)) +
geom_point(data = filter(unhoused_locations_yrs, Year == 2022), aes(x = Longitude, y = Latitude,
size = Responses,),
color = "#8c62aa",alpha = 0.7) +
guides(size = FALSE) +
theme_map() +
theme(
plot.title = element_text(hjust = 0, size= 13),
plot.subtitle = element_text(size = 10, hjust = 0), #subtitle not showing
legend.title = element_text(size = 12),
legend.title.align = 0.5)
}
if (input$year == "2020") { #2020 Rate
p <-  ggplot() +
geom_sf(data = zip_chi_shape) +
geom_sf(data = filter(opioid_shape_long, Year == "2020"), aes(fill = Overdose_Rate), color = NA) +
labs(title = "Opioid Overdose Rate (Nonfatal and Fatal Per 10,000 Ppl)",
subtitle = paste("By Zip in 2020. Dot Size Correlated W/ High-Density Unhoused Pop.")) +
scale_fill_viridis(name="Opioid Overdose Rate", option = "magma", trans = "reverse",
breaks = pretty_breaks(n = 5)) +
geom_point(data = filter(unhoused_locations_yrs, Year == 2022), aes(x = Longitude, y = Latitude,
size = Responses,),
color = "#8c62aa",alpha = 0.7) +
guides(size = FALSE) +
theme_map() +
theme(
plot.title = element_text(hjust = 0, size= 13),
plot.subtitle = element_text(size = 10, hjust = 0), #subtitle not showing
legend.title = element_text(size = 12),
legend.title.align = 0.5)
}
p
})
###Resource Equity
# Reactive function to select the plot based on user input
selected_plot <- reactive({
switch(input$plot_selector,
"Equity Zones" = equity_zones_plot,
"Equity Zones + Grocery Stores + Unhoused Population" = grocery_plot_unhoused_pop,
"Equity Zones + Mental Health Clinics + Unhoused Population" = mh_clinic_plot_unhoused_pop)
})
# Render the selected plot with an adjustable size
output$selected_plot <- renderPlot({
selected_plot() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size = 16)) +
theme(axis.text = element_blank(), axis.title = element_blank())
})
##Sentiment analysis
# For Sentiment Analysis Plot
output$sentimentPlot <- renderPlotly({
req(input$statType)  # Ensure that statType is not NULL or missing
overall_texas_feelings <- texas_feelings %>%
mutate(article_id = as.numeric(article_id)) %>%
group_by(article_id) %>%
summarise(mean_afinn = mean(afinn, na.rm=TRUE),
median_affin = median(afinn, na.rm=TRUE),
sd_afinn = sd(afinn, na.rm = TRUE),
min_afinn = min(afinn, na.rm = TRUE),
max_afinn = max(afinn, na.rm = TRUE))
# Dynamically select the statistic based on user input
sentiment_stat <- overall_texas_feelings %>%
select(article_id, !!sym(input$statType)) %>%
arrange(desc(article_id))
# Convert ggplot to plotly for interactivity
p3 <- ggplot(sentiment_stat, aes(x = article_id, y = !!sym(input$statType))) +
geom_line(color = "#00BFC4", size = 1) +
geom_point(color = "#F8766D", size = 2, alpha = 0.8) +
theme_minimal() +
labs(
title = "Overall Sentiment  by  Article across time",
subtitle = "Sentiment scores with linear regression line",
x = "Article ID",
y = "Mean Sentiment Score"
) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),
)
ggplotly(p3)
})
# For Count Over Time Plot
output$countPlot <- renderPlotly({
# Validate input
validate(
need(input$citySelect, "Please select at least one city.")
)
filtered_data <- texas_graph %>%
filter(City %in% !!sym(input$citySelect))
p2 <- ggplot(filtered_data, aes(x = month_year, y = log(Count), color = City)) +
geom_line() +
geom_point() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")+
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Time", y = "Count", title = "Count Over Time by City")
ggplotly(p2)
})
}
shinyApp(ui = ui, server = server)
