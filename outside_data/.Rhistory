kenya_df <- sept_2023_df %>%
filter(stri_detect_regex(text, "Kenya|Nairobi", case_insensitive = TRUE))
word_tokens_df <- unnest_tokens(kenya_df, word_tokens, text, token = "words")
stop_words <- get_stopwords("en")
no_sw_df <- anti_join(word_tokens_df, stop_words, by = c("word_tokens" = "word"))
word_freq <- count(no_sw_df, word_tokens, sort = TRUE)
# Sentiment Analysis
sentiment_nrc <- get_sentiments("nrc") %>% rename(nrc = sentiment)
sentiment_afinn <- get_sentiments("afinn") %>% rename(afinn = value)
sentiment_bing <- get_sentiments("bing") %>% rename(bing = sentiment)
no_sw_df <- left_join(no_sw_df, sentiment_nrc, by = c("word_tokens" = "word")) %>%
left_join(sentiment_afinn, by = c("word_tokens" = "word")) %>%
left_join(sentiment_bing, by = c("word_tokens" = "word"))
ggplot(data = remove_missing(no_sw_df, vars = c("afinn"))) +
geom_histogram(aes(afinn), stat = "count") +
scale_x_continuous(n.breaks = 7) +
labs(title = "Kenya Sentiment Analysis: WHO Africa News Releases, AFINN (Sept 2023)", x = "AFINN", y = "Count", caption = "Note: AFINN Sentiment Analysis")
ggplot(data = remove_missing(no_sw_df, vars = c("nrc"))) +
geom_histogram(aes(nrc), stat = "count") +
scale_x_discrete(guide = guide_axis(angle = 45)) +
labs(title = "Kenya Sentiment Analysis:  WHO Africa News Releases, NRC (Sept 2023)", x = "NRC", y = "Count", caption = "Note: NRC Sentiment Analysis")
ggplot(data = remove_missing(no_sw_df, vars = c("bing"))) +
geom_histogram(aes(bing), stat = "count") +
labs(title = "Kenya Sentiment Analysis:  WHO Africa News Releases, BING (Sept 2023)", x = "BING", y = "Count", caption = "Note: BING Sentiment Analysis")
library(rvest)
library(lubridate)
library(dplyr)
library(purrr)
library(htmltools)
base_url <- "https://www.afro.who.int"
output_directory <- "C:/Users/higgi/Documents/GitHub/problem-set-3-julia-higgins"
scrape_articles <- function(news_page) {
article_nodes <- news_page %>% html_nodes("article.news.node--type-news.teaser-full.clearfix h3.teaser-full__title a")
titles <- article_nodes %>% html_text()
links <- article_nodes %>% html_attr("href") %>% map_chr(~ifelse(is.na(.), NA, paste0(base_url, .))) %>% trimws()
dates <- news_page %>% html_nodes(".date time") %>% html_text() %>% dmy()
data.frame(title = titles, link = links, date = dates, stringsAsFactors = FALSE)
}
write_to_file <- function(content, file_name) {
cat("Writing to file:", file_name, "\n")
writeLines(content, file_name)
}
scrape_WHO_africa_news <- function(target_month, target_year, output_dir, sleep_duration = 2) {
who <- list()
i <- 0
article_count <- 1
while (TRUE) {
current_page_url <- paste0("https://www.afro.who.int/news/news-releases?page=", i)
cat("Scraping page:", current_page_url, "\n")
news_page <- read_html(current_page_url)
df <- scrape_articles(news_page)
if (nrow(df) == 0) {
break  # No more articles on the current page
}
who[[i + 1]] <- df
# Check if the current page contains articles published before the target date
if (all(df$date < ymd(paste(target_year, sprintf("%02d", target_month), "01", sep = "-")))) {
break
}
for (j in seq_len(nrow(df))) {
link <- df$link[j]
tryCatch({
content_page <- read_html(link)
content <- content_page %>% html_nodes(".field--name-body.field--type-text-with-summary.field--label-hidden.field--item") %>% html_text()
file_name <- file.path(output_dir, paste0("article_", article_count, ".txt"))
write_to_file(content, file_name)
article_count <- article_count + 1
}, error = function(e) {
cat("Scraping error:", link, "\n")
})
Sys.sleep(sleep_duration)
}
i <- i + 1
}
}
output_directory <- "C:/Users/higgi/Documents/"
output_directory <- "C:/Users/higgi/Documents/"
library(rvest)
library(lubridate)
library(dplyr)
library(purrr)
library(htmltools)
base_url <- "https://www.afro.who.int"
output_directory <- "C:/Users/higgi/Documents/"
scrape_articles <- function(news_page) {
article_nodes <- news_page %>% html_nodes("article.news.node--type-news.teaser-full.clearfix h3.teaser-full__title a")
titles <- article_nodes %>% html_text()
links <- article_nodes %>% html_attr("href") %>% map_chr(~ifelse(is.na(.), NA, paste0(base_url, .))) %>% trimws()
dates <- news_page %>% html_nodes(".date time") %>% html_text() %>% dmy()
data.frame(title = titles, link = links, date = dates, stringsAsFactors = FALSE)
}
write_to_file <- function(content, file_name) {
cat("Writing to file:", file_name, "\n")
writeLines(content, file_name)
}
scrape_WHO_africa_news <- function(target_month, target_year, output_dir, sleep_duration = 2) {
who <- list()
i <- 0
article_count <- 1
while (TRUE) {
current_page_url <- paste0("https://www.afro.who.int/news/news-releases?page=", i)
cat("Scraping page:", current_page_url, "\n")
news_page <- read_html(current_page_url)
df <- scrape_articles(news_page)
if (nrow(df) == 0) {
break  # No more articles on the current page
}
who[[i + 1]] <- df
# Check if the current page contains articles published before the target date
if (all(df$date < ymd(paste(target_year, sprintf("%02d", target_month), "01", sep = "-")))) {
break
}
for (j in seq_len(nrow(df))) {
link <- df$link[j]
tryCatch({
content_page <- read_html(link)
content <- content_page %>% html_nodes(".field--name-body.field--type-text-with-summary.field--label-hidden.field--item") %>% html_text()
file_name <- file.path(output_dir, paste0("article_", article_count, ".txt"))
write_to_file(content, file_name)
article_count <- article_count + 1
}, error = function(e) {
cat("Scraping error:", link, "\n")
})
Sys.sleep(sleep_duration)
}
i <- i + 1
}
}
output_directory <- "C:/Users/higgi/Documents/"
scrape_WHO_africa_news(target_month = 9, target_year = 2023, output_dir = output_directory)
library(ggplot2)
library(leaflet)
# Your dataset
df <- data.frame(
Location = c("The Loop, River North", "CTA - Red Line (95th/Dan Ryan)", "CTA - Blue Line (Forest Park)",
"Near West Side/Medical District", "CTA - Blue Line (Cumberland/Rosemont)", "North Side",
"CTA - Red Line", "South Side (East of State)", "O'Hare Airport", "South Side (West of State)",
"CTA - Red Line (Howard)", "West Town, Kennedy Expressway", "Midway Airport Terminal", "Northwest Side"),
Responses = c(170, 125, 118, 112, 71, 58, 54, 38, 33, 29, 13, 13, 12, 2),
Latitude = c(41.89248568824814, 41.72258849002998, 41.87370675013457, 41.86883204433447, 41.983883465320844, 41.90389519059428,
41.889900182393696, 41.75042676688248, 41.98037675551297, 41.75042676688248, 42.01889620273381, 41.95930482218085,
41.78852626097361, 41.88530874443534),
Longitude = c(-87.634044880516, -87.62443385767142, -87.81697954232854, -87.67398565436856, -87.83862460424264, -87.63211612952345,
-87.62808780459785, -87.63411546128873, -87.90900606226334, -87.63411546128873, -87.67255656226084, -87.74088846041468,
-87.74167007391868, -87.79271259245185)
)
# Create a leaflet map
leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
radius = ~sqrt(Responses) * 5,  # Adjust the size of the markers based on the 'Responses' column
color = "red",
fillOpacity = 0.7,
popup = ~paste("Location: ", Location, "<br>Responses: ", Responses)
) %>%
setView(lng = mean(df$Longitude), lat = mean(df$Latitude), zoom = 10) %>%
addMiniMap()  # Add a mini map for better navigation
library(RColorBrewer)  # For color scales
library(RColorBrewer)  # For color scales
color_palette <- colorNumeric(palette = "Reds", domain = df$Responses)
# Create a leaflet map
leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
radius = ~sqrt(Responses) * 5,  # Adjust the size of the markers based on the 'Responses' column
color = ~color_palette(Responses),  # Use color scale based on 'Responses'
fillOpacity = 0.7,
popup = ~paste("Location: ", Location, "<br>Responses: ", Responses)
) %>%
setView(lng = mean(df$Longitude), lat = mean(df$Latitude), zoom = 10) %>%
addMiniMap()  # Add a mini map for better navigation
library(leaflet.extras)
install.packages("leaflet.extras")
library(leaflet.extras)
leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
radius = ~sqrt(Responses) * 5,
color = "red",
fillOpacity = 0.7,
popup = ~paste("Location: ", Location, "<br>Responses: ", Responses)
) %>%
addHeatmap(
lng = ~Longitude,
lat = ~Latitude,
intensity = ~Responses
) %>%
setView(lng = mean(df$Longitude), lat = mean(df$Latitude), zoom = 10) %>%
addMiniMap()
# Create a leaflet map
leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
radius = ~sqrt(Responses) * 5,  # Adjust the size of the markers based on the 'Responses' column
color = ~color_palette(Responses),  # Use color scale based on 'Responses'
fillOpacity = 0.7,
popup = ~paste("Location: ", Location, "<br>Responses: ", Responses)
) %>%
setView(lng = mean(df$Longitude), lat = mean(df$Latitude), zoom = 10) %>%
addMiniMap()  # Add a mini map for better navigation
leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
radius = ~sqrt(Responses) * 5,
color = "red",
fillOpacity = 0.7,
popup = ~paste("Location: ", Location, "<br>Responses: ", Responses)
) %>%
addHeatmap(
lng = ~Longitude,
lat = ~Latitude,
intensity = ~Responses
) %>%
setView(lng = mean(df$Longitude), lat = mean(df$Latitude), zoom = 10) %>%
addMiniMap()
install.packages(tmap)
install.packages("tmap")
library(tmap)
tm_shape(df) +
tm_basemap() +
tm_bubbles(size = "Responses", col = "red", alpha = 0.7) +
tm_text("Location") +
tm_legend(outside = TRUE) +
tm_layout(main.title = "Responses Map")
sf_df <- st_as_sf(df, coords = c("Longitude", "Latitude"), crs = 4326)
sf_df <- st_as_sf(df, coords = c("Longitude", "Latitude"), crs = 4326)
library(sf)
sf_df <- st_as_sf(df, coords = c("Longitude", "Latitude"), crs = 4326)
tm_shape(df) +
tm_basemap() +
tm_bubbles(size = "Responses", col = "red", alpha = 0.7) +
tm_text("Location") +
tm_legend(outside = TRUE) +
tm_layout(main.title = "Responses Map")
tm_shape(sf_df) +
tm_basemap() +
tm_bubbles(size = "Responses", col = "red", alpha = 0.7) +
tm_text("Location") +
tm_legend(outside = TRUE) +
tm_layout(main.title = "Responses Map")
install.packages(tmaptools)
install.packages("tmaptools")
install.packages("tmaptools")
library(tmaptools)
# Create a thematic map with a basemap
qtm(sf_df, "Responses", fill.col = "red", fill.alpha = 0.7) +
tm_basemap(server = "OpenStreetMap") +
tm_layout(main.title = "Responses Map")
tm_shape(sf_df) +
tm_basemap() +
tm_bubbles(size = "Responses", col = "red", alpha = 0.7) +
tm_text("Location") +
tm_legend(outside = TRUE) +
tm_layout(main.title = "Responses Map")
# Create a thematic map with a basemap
choropleth_map <- qtm(sf_df, "Responses", fill.col = "red", fill.alpha = 0.7) +
tm_layout(main.title = "Responses Map")
basemap <- tm_basemap(server = "OpenStreetMap")
combined_map <- tmap_arrange(choropleth_map, basemap, nrow = 1)
combined_map <- tmap_arrange(choropleth_map, basemap, nrow = 1)
print(combined_map)
leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
radius = ~sqrt(Responses) * 5,  # Adjust the size of the markers based on the 'Responses' column
color = ~color_palette(Responses),  # Use color scale based on 'Responses'
fillOpacity = 0.7,
popup = ~paste("Location: ", Location, "<br>Responses: ", Responses)
) %>%
setView(lng = mean(df$Longitude), lat = mean(df$Latitude), zoom = 10) %>%
addMiniMap()  # Add a mini map for better navigation
leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
radius = ~sqrt(Responses) * 3,  # Adjust the size of the markers
color = ~color_palette(Responses),  # Use color scale based on 'Responses'
fillOpacity = 0.7,
clusterOptions = markerClusterOptions(),
popup = ~paste("Location: ", Location, "<br>Responses: ", Responses)
) %>%
setView(lng = mean(df$Longitude), lat = mean(df$Latitude), zoom = 10) %>%
addMiniMap()  # Add a mini map for better navigation
leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
radius = ~sqrt(Responses) * 2,  # Adjust the size of the markers
color = ~color_palette(Responses),  # Use color scale based on 'Responses'
fillOpacity = 0.7,
clusterOptions = markerClusterOptions(maxClusterRadius = 30),  # Adjust maxClusterRadius
popup = ~paste("Location: ", Location, "<br>Responses: ", Responses)
) %>%
setView(lng = mean(df$Longitude), lat = mean(df$Latitude), zoom = 12) %>%
addMiniMap()  # Add a mini map for better navigation
# Create a leaflet map
leaflet(df) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~Latitude,
radius = ~sqrt(Responses) * 5,  # Adjust the size of the markers based on the 'Responses' column
color = ~color_palette(Responses),  # Use color scale based on 'Responses'
fillOpacity = 0.7,
popup = ~paste("Location: ", Location, "<br>Responses: ", Responses)
) %>%
setView(lng = mean(df$Longitude), lat = mean(df$Latitude), zoom = 10) %>%
addMiniMap()  # Add a mini map for better navigation
sf_df <- st_as_sf(df, coords = c("Longitude", "Latitude"), crs = 4326)
plot(sf_df["Responses"], main = "Responses Map")
tm_shape(sf_df) +
tm_bubbles(size = "Responses", col = "red", alpha = 0.7) +
tm_text("Location") +
tm_legend(outside = TRUE) +
tm_layout(main.title = "Responses Map")
ggplot() +
geom_sf(data = sf_df, aes(size = Responses, color = Responses), alpha = 0.7) +
theme_minimal() +
labs(title = "Responses Map")
chicago_map <- get_stamenmap(bbox = c(left = -88.3, bottom = 41.4, right = -87.3, top = 42.3),
zoom = 11, maptype = "terrain-background", source = "stamen")
library(ggmap)
library(ggplot2sf)
install.packages("ggplot2sf")
library(ggplot2sf)
library(ggplot2sf)
chicago_map <- get_stamenmap(bbox = c(left = -88.3, bottom = 41.4, right = -87.3, top = 42.3),
zoom = 11, maptype = "terrain-background", source = "stamen")
chicago_map <- get_stamenmap(bbox = c(left = -88.3, bottom = 41.4, right = -87.3, top = 42.3),
zoom = 10, maptype = "terrain-background", source = "stamen")
chicago_map <- get_stamenmap(bbox = c(left = -88.3, bottom = 41.4, right = -87.3, top = 42.3),
zoom = 11, maptype = "terrain", source = "osm")
chicago_map <- get_map(location = c(lon = mean(df$Longitude), lat = mean(df$Latitude)),
zoom = 11, maptype = "terrain", source = "osm")
chicago_map <- get_map(location = c(lon = mean(df$Longitude), lat = mean(df$Latitude)),
zoom = 11, maptype = "terrain", source = "osm")
library(osmdata)
osm_basemap <- opq(bbox = c(left = -88.3, bottom = 41.4, right = -87.3, top = 42.3)) %>%
add_osm_feature(key = 'highway', value = 'residential') %>%
osmdata_sf()
ggplot() +
geom_sf(data = osm_basemap$osm_lines, color = "gray") +
geom_sf(data = sf_df, aes(size = Responses, color = Responses), alpha = 0.7) +
theme_minimal() +
labs(title = "Responses Map")
osm_basemap <- opq(bbox = c(left = -87.9, bottom = 41.8, right = -87.6, top = 42.1)) %>%
add_osm_feature(key = 'highway', value = 'residential') %>%
osmdata_sf()
# Get basemap for Chicago
basemap <- get_stamenmap(bbox = c(left = min(sf_df$Longitude),
bottom = min(sf_df$Latitude),
right = max(sf_df$Longitude),
top = max(sf_df$Latitude)),
zoom = 11, maptype = "terrain-background", source = "stamen")
basemap <- get_stamenmap(bbox = c(left = min(sf_df$Longitude),
bottom = min(sf_df$Latitude),
right = max(sf_df$Longitude),
top = max(sf_df$Latitude)),
zoom = 10, maptype = "terrain-background", source = "stamen")
leaflet(sf_df) %>%
addTiles() %>%
addCircleMarkers(
radius = ~sqrt(Responses) * 5,
color = "red",
fillOpacity = 0.7,
popup = ~paste("Location: ", Location, "<br>Responses: ", Responses)
) %>%
setView(lng = mean(sf_df), lat = mean(sf_df_subset$Latitude), zoom = 10)
leaflet(sf_df) %>%
addTiles() %>%
addCircleMarkers(
radius = ~sqrt(Responses) * 5,
color = "red",
fillOpacity = 0.7,
popup = ~paste("Location: ", Location, "<br>Responses: ", Responses)
) %>%
setView(lng = mean(sf_df), lat = mean(sf_df$Latitude), zoom = 10)
chicago_map <- get_stamenmap(
bbox = c(
left = min(sf_df$Longitude),
bottom = min(sf_df$Latitude),
right = max(sf_df$Longitude),
top = max(sf_df$Latitude)
),
zoom = 11,
maptype = "terrain-background",
source = "stamen"
)
chicago_map <- get_map(
location = c(lon = mean(sf_df$Longitude), lat = mean(sf_df$Latitude)),
zoom = 11,
maptype = "terrain",
source = "osm"
)
if (!is.na(mean(sf_df$Longitude)) && !is.na(mean(sf_df$Latitude))) {
chicago_map <- get_map(
location = c(lon = mean(sf_df$Longitude), lat = mean(sf_df$Latitude)),
zoom = 11,
maptype = "terrain",
source = "osm"
)
ggplot() +
geom_sf(data = sf_df, aes(size = Responses, color = Responses), alpha = 0.7) +
theme_minimal() +
labs(title = "Responses Map")
ggplot() +
geom_sf(data = sf_df, aes(size = Responses, color = Responses), alpha = 0.7) +
theme_minimal() +
labs(title = "Responses Map")
if (!is.na(mean(sf_df$Longitude)) && !is.na(mean(sf_df$Latitude))) {
chicago_map <- get_map(
location = c(lon = mean(sf_df$Longitude), lat = mean(sf_df$Latitude)),
zoom = 11,
maptype = "terrain",
source = "osm"
)}
ggplot() +
geom_sf(data = sf_df, aes(size = Responses, color = Responses), alpha = 0.7) +
theme_minimal() +
labs(title = "Responses Map")
rm(list = ls())
setwd("C:/Users/higgi/Documents/GitHub/problem-set-2-julia-higgins")
# Load libraries
library("tidyverse")
library("sf")
# Import first dataset: Socioeconomic indicators in Chicago
chi_socioeconomic <- read.csv("Census_Data_-_Selected_socioeconomic_indicators_in_Chicago__2008___2012_20240131.csv")
# Import second dataset: Chicago affordable rental housing developments
chi_housing <- read.csv("Affordable_Rental_Housing_Developments_20240129.csv")
rm(list = ls())
setwd("C:/Users/higgi/Documents/GitHub/problem-set-2-julia-higgins")
# Load libraries
library("tidyverse")
library("sf")
# Import first dataset: Socioeconomic indicators in Chicago
chi_socioeconomic <- read.csv("Census_Data_-_Selected_socioeconomic_indicators_in_Chicago__2008___2012_20240131.csv")
# Import second dataset: Chicago affordable rental housing developments
chi_housing <- read.csv("Affordable_Rental_Housing_Developments_20240129.csv")
setwd("C:/Users/higgi/Documents/GitHub/problem-set-2-julia-higgins")
library(tidyverse)
library(sf)
library(dplyr)
library(ggplot2)
library(scales)
# Import equity zone data
equity_zones <- read.csv("Healthy_Chicago_Equity_Zones_20240222.csv")
setwd("C:/Users/higgi/Documents/GitHub/Housing-and-Migrants-Chicago/outside_data")
# Load libraries
library(tidyverse)
library(sf)
library(dplyr)
library(ggplot2)
library(scales)
# Import equity zone data
equity_zones <- read.csv("Healthy_Chicago_Equity_Zones_20240222.csv")
# Import grocery store data
grocery_stores <- read.csv("Map_of_Grocery_Stores_-_2013.csv")
# Import mental health clinic location data
mh_clinics <- read.csv("CDPH_Mental_Health_Resources_20240222.csv")
# Import community area shapefiles
# Specify zipfile path
zip_path <- "Boundaries - Community Areas (current).zip"
# Create a temporary directory to extract the contents + unzip files
temp_dir <- tempdir()
unzip(zip_path, exdir = temp_dir)
# List the files in the temporary directory
list.files(temp_dir)
# Read shapefiles into R
chi_comm_area <- st_read(temp_dir)
# Extract latitude and longitude
coordinates <- st_coordinates(chi_comm_area$geometry)
# Create new columnswith lat and long
chi_comm_area$Latitude <- head(coordinates[, "Y"], n = nrow(chi_comm_area))
chi_comm_area$Longitude <- head(coordinates[, "X"], n = nrow(chi_comm_area))
# Convert all three dfs to shapefile format to support spatial join
equity_zones_sf <- st_as_sf(equity_zones, wkt = "Geometry")
grocery_stores_sf <- st_as_sf(grocery_stores, coords = c("LONGITUDE", "LATITUDE"))
# Extract lat and long from mh_clinics sf as intermediate step
mh_clinics$Longitude <- as.numeric(gsub("POINT \\((.*?) .*", "\\1", mh_clinics$Location))
mh_clinics$Latitude <- as.numeric(gsub("POINT \\(.*? (.*?)\\)", "\\1", mh_clinics$Location))
mh_clinics_sf <- st_as_sf(mh_clinics, coords = c("Longitude", "Latitude"))
# Standardize coordinate reference systems across sfs before joining
st_crs(chi_comm_area)
st_crs(equity_zones_sf)
chi_comm_area <- st_set_crs(chi_comm_area, st_crs(equity_zones_sf))
# Perform spatial join to create master dataset for mapping
joined_data <- st_join(chi_comm_area, equity_zones_sf, join = st_intersects)
joined_data <- st_join(joined_data, grocery_stores_sf, join = st_intersects)
joined_data <- st_join(joined_data, mh_clinics_sf, join = st_intersects)
# Plot the base map using equity zones
equity_zone_base_map <- ggplot(data = joined_data) +
geom_sf(aes(fill = Equity.Zone), alpha = 0.7)
equity_zone_base_map
equity_zone_base_map
ggplot(data = joined_data) +
geom_sf(aes(fill = Equity.Zone), alpha = 0.7) +
geom_sf(data = grocery_stores_sf, color = "blue", size = 2)
joined_data <- st_join(joined_data,mh_clinic_count, join = st_intersects)
